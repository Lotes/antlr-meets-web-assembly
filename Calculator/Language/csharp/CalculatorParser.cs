//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Calculator.antlr4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public partial class CalculatorParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		COS=1, SIN=2, TAN=3, ACOS=4, ASIN=5, ATAN=6, LN=7, LOG=8, SQRT=9, LPAREN=10, 
		RPAREN=11, PLUS=12, MINUS=13, TIMES=14, DIV=15, COMMA=16, POINT=17, POW=18, 
		SCIENTIFIC_NUMBER=19, WS=20;
	public const int
		RULE_expression = 0, RULE_multiplyingExpression = 1, RULE_powExpression = 2, 
		RULE_signedAtom = 3, RULE_atom = 4, RULE_scientific = 5, RULE_func_ = 6, 
		RULE_funcname = 7;
	public static readonly string[] ruleNames = {
		"expression", "multiplyingExpression", "powExpression", "signedAtom", 
		"atom", "scientific", "func_", "funcname"
	};

	private static readonly string[] _LiteralNames = {
		null, "'cos'", "'sin'", "'tan'", "'acos'", "'asin'", "'atan'", "'ln'", 
		"'log'", "'sqrt'", "'('", "')'", "'+'", "'-'", "'*'", "'/'", "','", "'.'", 
		"'^'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "COS", "SIN", "TAN", "ACOS", "ASIN", "ATAN", "LN", "LOG", "SQRT", 
		"LPAREN", "RPAREN", "PLUS", "MINUS", "TIMES", "DIV", "COMMA", "POINT", 
		"POW", "SCIENTIFIC_NUMBER", "WS"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "Calculator.antlr4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string SerializedAtn { get { return new string(_serializedATN); } }

	static CalculatorParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public CalculatorParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public CalculatorParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class ExpressionContext : ParserRuleContext {
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	 
		public ExpressionContext() { }
		public virtual void CopyFrom(ExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class AddContext : ExpressionContext {
		public ExpressionContext lhs;
		public IToken op;
		public MultiplyingExpressionContext rhs;
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public MultiplyingExpressionContext multiplyingExpression() {
			return GetRuleContext<MultiplyingExpressionContext>(0);
		}
		public ITerminalNode PLUS() { return GetToken(CalculatorParser.PLUS, 0); }
		public ITerminalNode MINUS() { return GetToken(CalculatorParser.MINUS, 0); }
		public AddContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAdd(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SkipAddContext : ExpressionContext {
		public MultiplyingExpressionContext multiplyingExpression() {
			return GetRuleContext<MultiplyingExpressionContext>(0);
		}
		public SkipAddContext(ExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterSkipAdd(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitSkipAdd(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipAdd(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		return expression(0);
	}

	private ExpressionContext expression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		ExpressionContext _localctx = new ExpressionContext(Context, _parentState);
		ExpressionContext _prevctx = _localctx;
		int _startState = 0;
		EnterRecursionRule(_localctx, 0, RULE_expression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SkipAddContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 17; multiplyingExpression(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 24;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AddContext(new ExpressionContext(_parentctx, _parentState));
					((AddContext)_localctx).lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_expression);
					State = 19;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 20;
					((AddContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==PLUS || _la==MINUS) ) {
						((AddContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 21; ((AddContext)_localctx).rhs = multiplyingExpression(0);
					}
					} 
				}
				State = 26;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,0,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class MultiplyingExpressionContext : ParserRuleContext {
		public MultiplyingExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_multiplyingExpression; } }
	 
		public MultiplyingExpressionContext() { }
		public virtual void CopyFrom(MultiplyingExpressionContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class MulContext : MultiplyingExpressionContext {
		public MultiplyingExpressionContext lhs;
		public IToken op;
		public PowExpressionContext rhs;
		public MultiplyingExpressionContext multiplyingExpression() {
			return GetRuleContext<MultiplyingExpressionContext>(0);
		}
		public PowExpressionContext powExpression() {
			return GetRuleContext<PowExpressionContext>(0);
		}
		public ITerminalNode TIMES() { return GetToken(CalculatorParser.TIMES, 0); }
		public ITerminalNode DIV() { return GetToken(CalculatorParser.DIV, 0); }
		public MulContext(MultiplyingExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMul(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class SkipMulContext : MultiplyingExpressionContext {
		public PowExpressionContext powExpression() {
			return GetRuleContext<PowExpressionContext>(0);
		}
		public SkipMulContext(MultiplyingExpressionContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterSkipMul(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitSkipMul(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitSkipMul(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public MultiplyingExpressionContext multiplyingExpression() {
		return multiplyingExpression(0);
	}

	private MultiplyingExpressionContext multiplyingExpression(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		MultiplyingExpressionContext _localctx = new MultiplyingExpressionContext(Context, _parentState);
		MultiplyingExpressionContext _prevctx = _localctx;
		int _startState = 2;
		EnterRecursionRule(_localctx, 2, RULE_multiplyingExpression, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new SkipMulContext(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 28; powExpression();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 35;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MulContext(new MultiplyingExpressionContext(_parentctx, _parentState));
					((MulContext)_localctx).lhs = _prevctx;
					PushNewRecursionContext(_localctx, _startState, RULE_multiplyingExpression);
					State = 30;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 31;
					((MulContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==TIMES || _la==DIV) ) {
						((MulContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 32; ((MulContext)_localctx).rhs = powExpression();
					}
					} 
				}
				State = 37;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class PowExpressionContext : ParserRuleContext {
		public SignedAtomContext lhs;
		public PowExpressionContext _powExpression;
		public IList<PowExpressionContext> _rhs = new List<PowExpressionContext>();
		public SignedAtomContext signedAtom() {
			return GetRuleContext<SignedAtomContext>(0);
		}
		public ITerminalNode[] POW() { return GetTokens(CalculatorParser.POW); }
		public ITerminalNode POW(int i) {
			return GetToken(CalculatorParser.POW, i);
		}
		public PowExpressionContext[] powExpression() {
			return GetRuleContexts<PowExpressionContext>();
		}
		public PowExpressionContext powExpression(int i) {
			return GetRuleContext<PowExpressionContext>(i);
		}
		public PowExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_powExpression; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterPowExpression(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitPowExpression(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPowExpression(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public PowExpressionContext powExpression() {
		PowExpressionContext _localctx = new PowExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_powExpression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 38; _localctx.lhs = signedAtom();
			State = 43;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 39; Match(POW);
					State = 40; _localctx._powExpression = powExpression();
					_localctx._rhs.Add(_localctx._powExpression);
					}
					} 
				}
				State = 45;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SignedAtomContext : ParserRuleContext {
		public SignedAtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_signedAtom; } }
	 
		public SignedAtomContext() { }
		public virtual void CopyFrom(SignedAtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class PlusAtomContext : SignedAtomContext {
		public SignedAtomContext operand;
		public ITerminalNode PLUS() { return GetToken(CalculatorParser.PLUS, 0); }
		public SignedAtomContext signedAtom() {
			return GetRuleContext<SignedAtomContext>(0);
		}
		public PlusAtomContext(SignedAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterPlusAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitPlusAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitPlusAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class MinusAtomContext : SignedAtomContext {
		public SignedAtomContext operand;
		public ITerminalNode MINUS() { return GetToken(CalculatorParser.MINUS, 0); }
		public SignedAtomContext signedAtom() {
			return GetRuleContext<SignedAtomContext>(0);
		}
		public MinusAtomContext(SignedAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterMinusAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitMinusAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitMinusAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class AtomAtomContext : SignedAtomContext {
		public AtomContext atm;
		public AtomContext atom() {
			return GetRuleContext<AtomContext>(0);
		}
		public AtomAtomContext(SignedAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterAtomAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitAtomAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitAtomAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class FuncAtomContext : SignedAtomContext {
		public Func_Context fnc;
		public Func_Context func_() {
			return GetRuleContext<Func_Context>(0);
		}
		public FuncAtomContext(SignedAtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterFuncAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitFuncAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public SignedAtomContext signedAtom() {
		SignedAtomContext _localctx = new SignedAtomContext(Context, State);
		EnterRule(_localctx, 6, RULE_signedAtom);
		try {
			State = 52;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case PLUS:
				_localctx = new PlusAtomContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 46; Match(PLUS);
				State = 47; ((PlusAtomContext)_localctx).operand = signedAtom();
				}
				break;
			case MINUS:
				_localctx = new MinusAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 48; Match(MINUS);
				State = 49; ((MinusAtomContext)_localctx).operand = signedAtom();
				}
				break;
			case COS:
			case SIN:
			case TAN:
			case ACOS:
			case ASIN:
			case ATAN:
			case LN:
			case LOG:
			case SQRT:
				_localctx = new FuncAtomContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 50; ((FuncAtomContext)_localctx).fnc = func_();
				}
				break;
			case LPAREN:
			case SCIENTIFIC_NUMBER:
				_localctx = new AtomAtomContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 51; ((AtomAtomContext)_localctx).atm = atom();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AtomContext : ParserRuleContext {
		public AtomContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_atom; } }
	 
		public AtomContext() { }
		public virtual void CopyFrom(AtomContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ScientificAtomContext : AtomContext {
		public ScientificContext scientific() {
			return GetRuleContext<ScientificContext>(0);
		}
		public ScientificAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterScientificAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitScientificAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientificAtom(this);
			else return visitor.VisitChildren(this);
		}
	}
	public partial class ParenthesisAtomContext : AtomContext {
		public ExpressionContext expr;
		public ITerminalNode LPAREN() { return GetToken(CalculatorParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(CalculatorParser.RPAREN, 0); }
		public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenthesisAtomContext(AtomContext context) { CopyFrom(context); }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterParenthesisAtom(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitParenthesisAtom(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitParenthesisAtom(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public AtomContext atom() {
		AtomContext _localctx = new AtomContext(Context, State);
		EnterRule(_localctx, 8, RULE_atom);
		try {
			State = 59;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case SCIENTIFIC_NUMBER:
				_localctx = new ScientificAtomContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 54; scientific();
				}
				break;
			case LPAREN:
				_localctx = new ParenthesisAtomContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 55; Match(LPAREN);
				State = 56; ((ParenthesisAtomContext)_localctx).expr = expression(0);
				State = 57; Match(RPAREN);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ScientificContext : ParserRuleContext {
		public ITerminalNode SCIENTIFIC_NUMBER() { return GetToken(CalculatorParser.SCIENTIFIC_NUMBER, 0); }
		public ScientificContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_scientific; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterScientific(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitScientific(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitScientific(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public ScientificContext scientific() {
		ScientificContext _localctx = new ScientificContext(Context, State);
		EnterRule(_localctx, 10, RULE_scientific);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 61; Match(SCIENTIFIC_NUMBER);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Func_Context : ParserRuleContext {
		public FuncnameContext fnc;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _ps = new List<ExpressionContext>();
		public ITerminalNode LPAREN() { return GetToken(CalculatorParser.LPAREN, 0); }
		public ITerminalNode RPAREN() { return GetToken(CalculatorParser.RPAREN, 0); }
		public FuncnameContext funcname() {
			return GetRuleContext<FuncnameContext>(0);
		}
		public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public ITerminalNode[] COMMA() { return GetTokens(CalculatorParser.COMMA); }
		public ITerminalNode COMMA(int i) {
			return GetToken(CalculatorParser.COMMA, i);
		}
		public Func_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_func_; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterFunc_(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitFunc_(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFunc_(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public Func_Context func_() {
		Func_Context _localctx = new Func_Context(Context, State);
		EnterRule(_localctx, 12, RULE_func_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 63; _localctx.fnc = funcname();
			State = 64; Match(LPAREN);
			State = 65; _localctx._expression = expression(0);
			_localctx._ps.Add(_localctx._expression);
			State = 70;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==COMMA) {
				{
				{
				State = 66; Match(COMMA);
				State = 67; _localctx._expression = expression(0);
				_localctx._ps.Add(_localctx._expression);
				}
				}
				State = 72;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 73; Match(RPAREN);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class FuncnameContext : ParserRuleContext {
		public ITerminalNode COS() { return GetToken(CalculatorParser.COS, 0); }
		public ITerminalNode TAN() { return GetToken(CalculatorParser.TAN, 0); }
		public ITerminalNode SIN() { return GetToken(CalculatorParser.SIN, 0); }
		public ITerminalNode ACOS() { return GetToken(CalculatorParser.ACOS, 0); }
		public ITerminalNode ATAN() { return GetToken(CalculatorParser.ATAN, 0); }
		public ITerminalNode ASIN() { return GetToken(CalculatorParser.ASIN, 0); }
		public ITerminalNode LOG() { return GetToken(CalculatorParser.LOG, 0); }
		public ITerminalNode LN() { return GetToken(CalculatorParser.LN, 0); }
		public ITerminalNode SQRT() { return GetToken(CalculatorParser.SQRT, 0); }
		public FuncnameContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_funcname; } }
		public override void EnterRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.EnterFuncname(this);
		}
		public override void ExitRule(IParseTreeListener listener) {
			ICalculatorListener typedListener = listener as ICalculatorListener;
			if (typedListener != null) typedListener.ExitFuncname(this);
		}
		public override TResult Accept<TResult>(IParseTreeVisitor<TResult> visitor) {
			ICalculatorVisitor<TResult> typedVisitor = visitor as ICalculatorVisitor<TResult>;
			if (typedVisitor != null) return typedVisitor.VisitFuncname(this);
			else return visitor.VisitChildren(this);
		}
	}

	[RuleVersion(0)]
	public FuncnameContext funcname() {
		FuncnameContext _localctx = new FuncnameContext(Context, State);
		EnterRule(_localctx, 14, RULE_funcname);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 75;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << COS) | (1L << SIN) | (1L << TAN) | (1L << ACOS) | (1L << ASIN) | (1L << ATAN) | (1L << LN) | (1L << LOG) | (1L << SQRT))) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 0: return expression_sempred((ExpressionContext)_localctx, predIndex);
		case 1: return multiplyingExpression_sempred((MultiplyingExpressionContext)_localctx, predIndex);
		}
		return true;
	}
	private bool expression_sempred(ExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool multiplyingExpression_sempred(MultiplyingExpressionContext _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}

	private static char[] _serializedATN = {
		'\x3', '\x608B', '\xA72A', '\x8133', '\xB9ED', '\x417C', '\x3BE7', '\x7786', 
		'\x5964', '\x3', '\x16', 'P', '\x4', '\x2', '\t', '\x2', '\x4', '\x3', 
		'\t', '\x3', '\x4', '\x4', '\t', '\x4', '\x4', '\x5', '\t', '\x5', '\x4', 
		'\x6', '\t', '\x6', '\x4', '\a', '\t', '\a', '\x4', '\b', '\t', '\b', 
		'\x4', '\t', '\t', '\t', '\x3', '\x2', '\x3', '\x2', '\x3', '\x2', '\x3', 
		'\x2', '\x3', '\x2', '\x3', '\x2', '\a', '\x2', '\x19', '\n', '\x2', '\f', 
		'\x2', '\xE', '\x2', '\x1C', '\v', '\x2', '\x3', '\x3', '\x3', '\x3', 
		'\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\x3', '\a', '\x3', '$', 
		'\n', '\x3', '\f', '\x3', '\xE', '\x3', '\'', '\v', '\x3', '\x3', '\x4', 
		'\x3', '\x4', '\x3', '\x4', '\a', '\x4', ',', '\n', '\x4', '\f', '\x4', 
		'\xE', '\x4', '/', '\v', '\x4', '\x3', '\x5', '\x3', '\x5', '\x3', '\x5', 
		'\x3', '\x5', '\x3', '\x5', '\x3', '\x5', '\x5', '\x5', '\x37', '\n', 
		'\x5', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', '\x6', '\x3', 
		'\x6', '\x5', '\x6', '>', '\n', '\x6', '\x3', '\a', '\x3', '\a', '\x3', 
		'\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\x3', '\b', '\a', '\b', 
		'G', '\n', '\b', '\f', '\b', '\xE', '\b', 'J', '\v', '\b', '\x3', '\b', 
		'\x3', '\b', '\x3', '\t', '\x3', '\t', '\x3', '\t', '\x2', '\x4', '\x2', 
		'\x4', '\n', '\x2', '\x4', '\x6', '\b', '\n', '\f', '\xE', '\x10', '\x2', 
		'\x5', '\x3', '\x2', '\xE', '\xF', '\x3', '\x2', '\x10', '\x11', '\x3', 
		'\x2', '\x3', '\v', '\x2', 'O', '\x2', '\x12', '\x3', '\x2', '\x2', '\x2', 
		'\x4', '\x1D', '\x3', '\x2', '\x2', '\x2', '\x6', '(', '\x3', '\x2', '\x2', 
		'\x2', '\b', '\x36', '\x3', '\x2', '\x2', '\x2', '\n', '=', '\x3', '\x2', 
		'\x2', '\x2', '\f', '?', '\x3', '\x2', '\x2', '\x2', '\xE', '\x41', '\x3', 
		'\x2', '\x2', '\x2', '\x10', 'M', '\x3', '\x2', '\x2', '\x2', '\x12', 
		'\x13', '\b', '\x2', '\x1', '\x2', '\x13', '\x14', '\x5', '\x4', '\x3', 
		'\x2', '\x14', '\x1A', '\x3', '\x2', '\x2', '\x2', '\x15', '\x16', '\f', 
		'\x4', '\x2', '\x2', '\x16', '\x17', '\t', '\x2', '\x2', '\x2', '\x17', 
		'\x19', '\x5', '\x4', '\x3', '\x2', '\x18', '\x15', '\x3', '\x2', '\x2', 
		'\x2', '\x19', '\x1C', '\x3', '\x2', '\x2', '\x2', '\x1A', '\x18', '\x3', 
		'\x2', '\x2', '\x2', '\x1A', '\x1B', '\x3', '\x2', '\x2', '\x2', '\x1B', 
		'\x3', '\x3', '\x2', '\x2', '\x2', '\x1C', '\x1A', '\x3', '\x2', '\x2', 
		'\x2', '\x1D', '\x1E', '\b', '\x3', '\x1', '\x2', '\x1E', '\x1F', '\x5', 
		'\x6', '\x4', '\x2', '\x1F', '%', '\x3', '\x2', '\x2', '\x2', ' ', '!', 
		'\f', '\x4', '\x2', '\x2', '!', '\"', '\t', '\x3', '\x2', '\x2', '\"', 
		'$', '\x5', '\x6', '\x4', '\x2', '#', ' ', '\x3', '\x2', '\x2', '\x2', 
		'$', '\'', '\x3', '\x2', '\x2', '\x2', '%', '#', '\x3', '\x2', '\x2', 
		'\x2', '%', '&', '\x3', '\x2', '\x2', '\x2', '&', '\x5', '\x3', '\x2', 
		'\x2', '\x2', '\'', '%', '\x3', '\x2', '\x2', '\x2', '(', '-', '\x5', 
		'\b', '\x5', '\x2', ')', '*', '\a', '\x14', '\x2', '\x2', '*', ',', '\x5', 
		'\x6', '\x4', '\x2', '+', ')', '\x3', '\x2', '\x2', '\x2', ',', '/', '\x3', 
		'\x2', '\x2', '\x2', '-', '+', '\x3', '\x2', '\x2', '\x2', '-', '.', '\x3', 
		'\x2', '\x2', '\x2', '.', '\a', '\x3', '\x2', '\x2', '\x2', '/', '-', 
		'\x3', '\x2', '\x2', '\x2', '\x30', '\x31', '\a', '\xE', '\x2', '\x2', 
		'\x31', '\x37', '\x5', '\b', '\x5', '\x2', '\x32', '\x33', '\a', '\xF', 
		'\x2', '\x2', '\x33', '\x37', '\x5', '\b', '\x5', '\x2', '\x34', '\x37', 
		'\x5', '\xE', '\b', '\x2', '\x35', '\x37', '\x5', '\n', '\x6', '\x2', 
		'\x36', '\x30', '\x3', '\x2', '\x2', '\x2', '\x36', '\x32', '\x3', '\x2', 
		'\x2', '\x2', '\x36', '\x34', '\x3', '\x2', '\x2', '\x2', '\x36', '\x35', 
		'\x3', '\x2', '\x2', '\x2', '\x37', '\t', '\x3', '\x2', '\x2', '\x2', 
		'\x38', '>', '\x5', '\f', '\a', '\x2', '\x39', ':', '\a', '\f', '\x2', 
		'\x2', ':', ';', '\x5', '\x2', '\x2', '\x2', ';', '<', '\a', '\r', '\x2', 
		'\x2', '<', '>', '\x3', '\x2', '\x2', '\x2', '=', '\x38', '\x3', '\x2', 
		'\x2', '\x2', '=', '\x39', '\x3', '\x2', '\x2', '\x2', '>', '\v', '\x3', 
		'\x2', '\x2', '\x2', '?', '@', '\a', '\x15', '\x2', '\x2', '@', '\r', 
		'\x3', '\x2', '\x2', '\x2', '\x41', '\x42', '\x5', '\x10', '\t', '\x2', 
		'\x42', '\x43', '\a', '\f', '\x2', '\x2', '\x43', 'H', '\x5', '\x2', '\x2', 
		'\x2', '\x44', '\x45', '\a', '\x12', '\x2', '\x2', '\x45', 'G', '\x5', 
		'\x2', '\x2', '\x2', '\x46', '\x44', '\x3', '\x2', '\x2', '\x2', 'G', 
		'J', '\x3', '\x2', '\x2', '\x2', 'H', '\x46', '\x3', '\x2', '\x2', '\x2', 
		'H', 'I', '\x3', '\x2', '\x2', '\x2', 'I', 'K', '\x3', '\x2', '\x2', '\x2', 
		'J', 'H', '\x3', '\x2', '\x2', '\x2', 'K', 'L', '\a', '\r', '\x2', '\x2', 
		'L', '\xF', '\x3', '\x2', '\x2', '\x2', 'M', 'N', '\t', '\x4', '\x2', 
		'\x2', 'N', '\x11', '\x3', '\x2', '\x2', '\x2', '\b', '\x1A', '%', '-', 
		'\x36', '=', 'H',
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
