//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.7.2
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from Calculator.antlr4 by ANTLR 4.7.2

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using Antlr4.Runtime.Misc;
using IParseTreeListener = Antlr4.Runtime.Tree.IParseTreeListener;
using IToken = Antlr4.Runtime.IToken;

/// <summary>
/// This interface defines a complete listener for a parse tree produced by
/// <see cref="CalculatorParser"/>.
/// </summary>
[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.7.2")]
[System.CLSCompliant(false)]
public interface ICalculatorListener : IParseTreeListener {
	/// <summary>
	/// Enter a parse tree produced by the <c>add</c>
	/// labeled alternative in <see cref="CalculatorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAdd([NotNull] CalculatorParser.AddContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>add</c>
	/// labeled alternative in <see cref="CalculatorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAdd([NotNull] CalculatorParser.AddContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>skipAdd</c>
	/// labeled alternative in <see cref="CalculatorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSkipAdd([NotNull] CalculatorParser.SkipAddContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>skipAdd</c>
	/// labeled alternative in <see cref="CalculatorParser.expression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSkipAdd([NotNull] CalculatorParser.SkipAddContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>mul</c>
	/// labeled alternative in <see cref="CalculatorParser.multiplyingExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMul([NotNull] CalculatorParser.MulContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>mul</c>
	/// labeled alternative in <see cref="CalculatorParser.multiplyingExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMul([NotNull] CalculatorParser.MulContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>skipMul</c>
	/// labeled alternative in <see cref="CalculatorParser.multiplyingExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterSkipMul([NotNull] CalculatorParser.SkipMulContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>skipMul</c>
	/// labeled alternative in <see cref="CalculatorParser.multiplyingExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitSkipMul([NotNull] CalculatorParser.SkipMulContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculatorParser.powExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPowExpression([NotNull] CalculatorParser.PowExpressionContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculatorParser.powExpression"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPowExpression([NotNull] CalculatorParser.PowExpressionContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>plusAtom</c>
	/// labeled alternative in <see cref="CalculatorParser.signedAtom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterPlusAtom([NotNull] CalculatorParser.PlusAtomContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>plusAtom</c>
	/// labeled alternative in <see cref="CalculatorParser.signedAtom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitPlusAtom([NotNull] CalculatorParser.PlusAtomContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>minusAtom</c>
	/// labeled alternative in <see cref="CalculatorParser.signedAtom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterMinusAtom([NotNull] CalculatorParser.MinusAtomContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>minusAtom</c>
	/// labeled alternative in <see cref="CalculatorParser.signedAtom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitMinusAtom([NotNull] CalculatorParser.MinusAtomContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>funcAtom</c>
	/// labeled alternative in <see cref="CalculatorParser.signedAtom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncAtom([NotNull] CalculatorParser.FuncAtomContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>funcAtom</c>
	/// labeled alternative in <see cref="CalculatorParser.signedAtom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncAtom([NotNull] CalculatorParser.FuncAtomContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>atomAtom</c>
	/// labeled alternative in <see cref="CalculatorParser.signedAtom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterAtomAtom([NotNull] CalculatorParser.AtomAtomContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>atomAtom</c>
	/// labeled alternative in <see cref="CalculatorParser.signedAtom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitAtomAtom([NotNull] CalculatorParser.AtomAtomContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>scientificAtom</c>
	/// labeled alternative in <see cref="CalculatorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScientificAtom([NotNull] CalculatorParser.ScientificAtomContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>scientificAtom</c>
	/// labeled alternative in <see cref="CalculatorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScientificAtom([NotNull] CalculatorParser.ScientificAtomContext context);
	/// <summary>
	/// Enter a parse tree produced by the <c>parenthesisAtom</c>
	/// labeled alternative in <see cref="CalculatorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterParenthesisAtom([NotNull] CalculatorParser.ParenthesisAtomContext context);
	/// <summary>
	/// Exit a parse tree produced by the <c>parenthesisAtom</c>
	/// labeled alternative in <see cref="CalculatorParser.atom"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitParenthesisAtom([NotNull] CalculatorParser.ParenthesisAtomContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculatorParser.scientific"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterScientific([NotNull] CalculatorParser.ScientificContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculatorParser.scientific"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitScientific([NotNull] CalculatorParser.ScientificContext context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculatorParser.func_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFunc_([NotNull] CalculatorParser.Func_Context context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculatorParser.func_"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFunc_([NotNull] CalculatorParser.Func_Context context);
	/// <summary>
	/// Enter a parse tree produced by <see cref="CalculatorParser.funcname"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void EnterFuncname([NotNull] CalculatorParser.FuncnameContext context);
	/// <summary>
	/// Exit a parse tree produced by <see cref="CalculatorParser.funcname"/>.
	/// </summary>
	/// <param name="context">The parse tree.</param>
	void ExitFuncname([NotNull] CalculatorParser.FuncnameContext context);
}
